#!/usr/bin/env ts-node

import { execSync } from 'child_process';
import * as path from 'path';

console.log('üå± Script para executar o seed do formul√°rio com grupos\n');

// Fun√ß√£o para executar comandos
function runCommand(command: string, description: string) {
    console.log(`üîÑ ${description}...`);
    try {
        const result = execSync(command, { 
            cwd: __dirname, 
            stdio: 'inherit',
            encoding: 'utf-8'
        });
        console.log(`‚úÖ ${description} conclu√≠do!\n`);
        return true;
    } catch (error) {
        console.error(`‚ùå Erro ao ${description.toLowerCase()}:`, error);
        return false;
    }
}

// Fun√ß√£o principal
async function main() {
    console.log('üìã Op√ß√µes dispon√≠veis:');
    console.log('');
    console.log('üå± SEEDS PRINCIPAIS:');
    console.log('1. Executar seed b√°sico (templates)');
    console.log('2. Executar seed completo (demos)');
    console.log('3. Disponibilizar formul√°rios para organiza√ß√µes');
    console.log('');
    console.log('üë• SEEDS DE USU√ÅRIOS:');
    console.log('4. Usu√°rios e organiza√ß√£o demo');
    console.log('5. Respostas do formul√°rio espiritual');
    console.log('');
    console.log('üßπ MANUTEN√á√ÉO:');
    console.log('6. Limpar formul√°rios duplicados');
    console.log('7. Verificar sincroniza√ß√£o do banco');
    console.log('8. Regenerar Prisma Client');
    console.log('9. Limpar banco de dados');
    console.log('');
    console.log('0. Sair\n');

    const readline = require('readline');
    const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });

    rl.question('Escolha uma op√ß√£o (0-9): ', async (answer: string) => {
        switch (answer.trim()) {
            case '1':
                console.log('\nüöÄ Executando seed b√°sico (templates)...\n');
                const success = runCommand(
                    'ts-node basic/seed.ts',
                    'Seed b√°sico (templates)'
                );
                if (success) {
                    console.log('üéâ Seed b√°sico executado com sucesso!');
                }
                break;

            case '2':
                console.log('\nüöÄ Executando seed completo (demos)...\n');
                const successComplete = runCommand(
                    'ts-node demos/detran/main.ts',
                    'Seed completo (demos)'
                );
                if (successComplete) {
                    console.log('üéâ Seed completo executado com sucesso!');
                }
                break;

            case '3':
                console.log('\nüöÄ Disponibilizando formul√°rios para organiza√ß√µes...\n');
                const successOrgs = runCommand(
                    'ts-node utils/organizations-forms.ts',
                    'Disponibilizar formul√°rios para organiza√ß√µes'
                );
                if (successOrgs) {
                    console.log('üéâ Formul√°rios disponibilizados com sucesso!');
                }
                break;

            case '4':
                console.log('\nüöÄ Executando usu√°rios e organiza√ß√£o demo...\n');
                const successUsers = runCommand(
                    'ts-node demos/default/seed-users-only.ts',
                    'Seed dos usu√°rios e organiza√ß√£o demo'
                );
                if (successUsers) {
                    console.log('üéâ Usu√°rios e organiza√ß√£o demo criados com sucesso!');
                }
                break;

            case '5':
                console.log('\nüöÄ Executando respostas do formul√°rio espiritual...\n');
                const successEspiritualResponses = runCommand(
                    'ts-node demos/default/seed-espiritual-responses.ts',
                    'Seed das respostas do formul√°rio espiritual'
                );
                if (successEspiritualResponses) {
                    console.log('üéâ Respostas espirituais criadas com sucesso!');
                }
                break;

            case '6':
                console.log('\nüßπ Executando limpeza de formul√°rios duplicados...\n');
                const successClean = runCommand(
                    'ts-node utils/clean-duplicate-forms.ts',
                    'Limpeza de formul√°rios duplicados'
                );
                if (successClean) {
                    console.log('üéâ Limpeza conclu√≠da com sucesso!');
                }
                break;

        

            case '7':
                console.log('\nüîç Verificando sincroniza√ß√£o do banco...\n');
                runCommand(
                    'npx prisma db push',
                    'Sincroniza√ß√£o do banco'
                );
                break;

            case '8':
                console.log('\nüîß Regenerando Prisma Client...\n');
                runCommand(
                    'npx prisma generate',
                    'Gera√ß√£o do Prisma Client'
                );
                break;

            case '9':
                console.log('\nüóëÔ∏è Limpando banco de dados...\n');
                console.log('‚ö†Ô∏è ATEN√á√ÉO: Esta a√ß√£o ir√° apagar todos os dados do banco!');
                rl.question('Tem certeza que deseja continuar? (s/N): ', (confirm: string) => {
                    if (confirm.toLowerCase() === 's' || confirm.toLowerCase() === 'sim') {
                        runCommand(
                           "npx prisma migrate reset --force && npm run seed:deleteTestUsers",
                           'Limpeza do banco de dados'
                        );
                    } else {
                        console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio.');
                    }
                    rl.close();
                });
                return; // Retorna para evitar fechar o readline antes da confirma√ß√£o

        
            case '0':
                console.log('\nüëã Saindo...');
                rl.close();
                process.exit(0);
                break;

            default:
                console.log('\n‚ùå Op√ß√£o inv√°lida!');
                break;
        }

        rl.close();
    });
}

// Executar se chamado diretamente
if (require.main === module) {
    main().catch(console.error);
}

export default main; 