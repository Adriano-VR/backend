import { PrismaClient } from "@prisma/client";
import { createUser, createOrganizations, addUsersToOrganization, createDepartments, assignCollaboratorsToDepartments } from "../../utils/methods";
import { demoDefaultUsers, demoDefaultOrganizations } from "./data";

const prisma = new PrismaClient();

const seedUsersAndOrganization = async () => {
    console.log('üöÄ Iniciando cria√ß√£o dos usu√°rios e organiza√ß√£o demo...');

    // Criar usu√°rios
    const collaboratorsCreated: any[] = []
    let admin: any = null;
    
    for (const user of demoDefaultUsers) {
        try {
            const createdUser = await createUser(user);
            console.log(`‚úÖ Usu√°rio criado: ${createdUser.name} (${createdUser.email})`);
            
            // Separar colaboradores do gestor
            if (createdUser.role === 'collaborator') {
                collaboratorsCreated.push(createdUser);
            } else if (createdUser.role === 'admin') {
                admin = createdUser;
            }
        } catch (error) {
            console.error(`‚ùå Erro ao criar usu√°rio ${user.name}:`, error);
        }
    }

    if (!admin) {
        throw new Error('Administrador n√£o encontrado. Certifique-se de que existe um usu√°rio com role "admin"');
    }

    // Criar organiza√ß√µes
    console.log('üè¢ Criando organiza√ß√µes...');
    const organizations = await createOrganizations(admin.id, demoDefaultOrganizations);
    console.log('‚úÖ Organiza√ß√µes criadas.');

    // Adicionar usu√°rios √† organiza√ß√£o
    console.log('üë• Adicionando usu√°rios √† organiza√ß√£o...');
    await addUsersToOrganization(organizations[0].id, collaboratorsCreated);
    console.log('‚úÖ Usu√°rios adicionados √† organiza√ß√£o.');

    // Adicionar admin como membro da organiza√ß√£o
    console.log('üëë Adicionando admin como membro da organiza√ß√£o...');
    await addUsersToOrganization(organizations[0].id, [admin]);
    console.log('‚úÖ Admin adicionado como membro da organiza√ß√£o.');

    // Criar departamentos
    console.log('üè¢ Criando departamentos...');
    const departments = await createDepartments(organizations[0].id, demoDefaultOrganizations[0].departments || []);
    console.log('‚úÖ Departamentos criados.');

    // Distribuir colaboradores pelos departamentos
    console.log('üë• Distribuindo colaboradores pelos departamentos...');
    await assignCollaboratorsToDepartments(organizations[0].id, departments);
    console.log('‚úÖ Colaboradores distribu√≠dos pelos departamentos.');

    console.log('üéâ Usu√°rios e organiza√ß√£o demo criados com sucesso!');
}

(async () => {
    try {
        await seedUsersAndOrganization();
    } catch (error) {
        console.error('‚ùå Erro durante o seed:', error);
    } finally {
        await prisma.$disconnect();
    }
})(); 