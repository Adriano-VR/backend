import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export async function seedCampaignsWithProjects() {
  console.log('üå± Iniciando seed avan√ßado de campanhas com projetos...');

  try {
    // Buscar organiza√ß√µes existentes
    const organizations = await prisma.organization.findMany({
      take: 2,
    });

    if (organizations.length === 0) {
      console.log('‚ùå Nenhuma organiza√ß√£o encontrada. Execute o seed de organiza√ß√µes primeiro.');
      return;
    }

    // Buscar usu√°rios existentes
    const users = await prisma.profile.findMany({
      where: {
        role: {
          in: ['admin', 'super_admin']
        }
      },
      take: 2,
    });

    if (users.length === 0) {
      console.log('‚ùå Nenhum usu√°rio admin encontrado. Execute o seed de usu√°rios primeiro.');
      return;
    }

    const organization = organizations[0];
    const user = users[0];

    // Criar campanha principal com projetos
    const mainCampaign = await prisma.campaign.create({
      data: {
        name: 'Campanha de Sa√∫de Mental e Bem-estar 2024',
        description: 'Campanha anual abrangente para promo√ß√£o da sa√∫de mental e bem-estar organizacional, incluindo preven√ß√£o de burnout, gest√£o de estresse e desenvolvimento de resili√™ncia',
        frequency: 'anual',
        startDate: new Date('2024-01-01'),
        endDate: new Date('2024-12-31'),
        status: 'active',
        organizationId: organization.id,
        createdById: user.id,
      },
    });

    console.log(`‚úÖ Campanha principal criada: ${mainCampaign.name}`);

    // Criar projetos vinculados √† campanha
    const projects = [
      {
        title: 'Projeto Preventivo - Avalia√ß√£o de Riscos Psicossociais',
        slug: 'avaliacao-riscos-psicossociais-2024',
        description: 'Identifica√ß√£o e avalia√ß√£o de fatores de risco psicossociais na organiza√ß√£o',
        type: 'preventivo' as const,
        status: 'in_progress' as const,
        organizationId: organization.id,
        createdById: user.id,
      },
      {
        title: 'Projeto Contingencial - Programa de Interven√ß√£o em Crise',
        slug: 'programa-intervencao-crise-2024',
        description: 'Protocolos e procedimentos para interven√ß√£o em situa√ß√µes de crise de sa√∫de mental',
        type: 'preventivo' as const,
        status: 'pending' as const,
        organizationId: organization.id,
        createdById: user.id,
      },
      {
        title: 'Projeto de Treinamento - Workshops de Bem-estar',
        slug: 'workshops-bem-estar-2024',
        description: 'S√©rie de workshops mensais sobre temas de sa√∫de mental e bem-estar',
        type: 'checklist' as const,
        status: 'in_progress' as const,
        organizationId: organization.id,
        createdById: user.id,
      },
    ];

    for (const projectData of projects) {
      const project = await prisma.project.create({
        data: projectData,
      });
      console.log(`‚úÖ Projeto criado: ${project.title}`);

      // Vincular projeto √† campanha
      await prisma.project.update({
        where: { id: project.id },
        data: {
          campaigns: {
            connect: { id: mainCampaign.id }
          }
        }
      });
      console.log(`üîó Projeto vinculado √† campanha: ${project.title}`);
    }

    // Criar documentos da campanha
    const documents = [
      {
        name: 'Manual de Sa√∫de Mental Organizacional',
        description: 'Guia completo com pol√≠ticas e procedimentos de sa√∫de mental',
        fileUrl: 'https://example.com/manual-saude-mental.pdf',
        fileType: 'application/pdf',
        fileSize: 2048576, // 2MB
        campaignId: mainCampaign.id,
        uploadedById: user.id,
      },
      {
        name: 'Apresenta√ß√£o - Campanha de Bem-estar',
        description: 'Slides de apresenta√ß√£o da campanha para stakeholders',
        fileUrl: 'https://example.com/apresentacao-campanha.pptx',
        fileType: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
        fileSize: 1048576, // 1MB
        campaignId: mainCampaign.id,
        uploadedById: user.id,
      },
      {
        name: 'Checklist de Implementa√ß√£o',
        description: 'Lista de verifica√ß√£o para implementa√ß√£o das a√ß√µes da campanha',
        fileUrl: 'https://example.com/checklist-implementacao.xlsx',
        fileType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        fileSize: 512000, // 500KB
        campaignId: mainCampaign.id,
        uploadedById: user.id,
      },
    ];

    for (const documentData of documents) {
      const document = await prisma.campaignDocument.create({
        data: documentData,
      });
      console.log(`‚úÖ Documento criado: ${document.name}`);
    }

    // Criar campanha de seguran√ßa
    const securityCampaign = await prisma.campaign.create({
      data: {
        name: 'Campanha de Seguran√ßa e Preven√ß√£o 2024',
        description: 'Campanha semestral focada em seguran√ßa do trabalho e preven√ß√£o de acidentes',
        frequency: 'semestral',
        startDate: new Date('2024-01-01'),
        endDate: new Date('2024-06-30'),
        status: 'active',
        organizationId: organization.id,
        createdById: user.id,
      },
    });

    console.log(`‚úÖ Campanha de seguran√ßa criada: ${securityCampaign.name}`);

    // Criar projetos para campanha de seguran√ßa
    const securityProjects = [
      {
        title: 'Projeto Preventivo - Treinamento de EPIs',
        slug: 'treinamento-epis-2024',
        description: 'Capacita√ß√£o sobre uso correto de equipamentos de prote√ß√£o individual',
        type: 'preventivo' as const,
        status: 'completed' as const,
        organizationId: organization.id,
        createdById: user.id,
      },
      {
        title: 'Projeto Contingencial - Plano de Emerg√™ncia',
        slug: 'plano-emergencia-2024',
        description: 'Desenvolvimento e teste de planos de emerg√™ncia e evacua√ß√£o',
        type: 'preventivo' as const,
        status: 'in_progress' as const,
        organizationId: organization.id,
        createdById: user.id,
      },
    ];

    for (const projectData of securityProjects) {
      const project = await prisma.project.create({
        data: projectData,
      });
      console.log(`‚úÖ Projeto de seguran√ßa criado: ${project.title}`);

      // Vincular projeto √† campanha de seguran√ßa
      await prisma.project.update({
        where: { id: project.id },
        data: {
          campaigns: {
            connect: { id: securityCampaign.id }
          }
        }
      });
      console.log(`üîó Projeto vinculado √† campanha de seguran√ßa: ${project.title}`);
    }

    // Criar campanha trimestral
    const quarterlyCampaign = await prisma.campaign.create({
      data: {
        name: 'Campanha de Desenvolvimento Pessoal Q1-Q4 2024',
        description: 'Campanha trimestral para desenvolvimento de habilidades pessoais e profissionais',
        frequency: 'trimestral',
        startDate: new Date('2024-01-01'),
        endDate: new Date('2024-12-31'),
        status: 'active',
        organizationId: organization.id,
        createdById: user.id,
      },
    });

    console.log(`‚úÖ Campanha trimestral criada: ${quarterlyCampaign.name}`);

    // Criar projetos para campanha trimestral
    const quarterlyProjects = [
      {
        title: 'Projeto Q1 - Comunica√ß√£o Efetiva',
        slug: 'comunicacao-efetiva-q1-2024',
        description: 'Workshops sobre comunica√ß√£o assertiva e feedback construtivo',
        type: 'checklist' as const,
        status: 'completed' as const,
        organizationId: organization.id,
        createdById: user.id,
      },
      {
        title: 'Projeto Q2 - Gest√£o de Tempo',
        slug: 'gestao-tempo-q2-2024',
        description: 'Treinamentos sobre produtividade e organiza√ß√£o pessoal',
        type: 'checklist' as const,
        status: 'in_progress' as const,
        organizationId: organization.id,
        createdById: user.id,
      },
      {
        title: 'Projeto Q3 - Lideran√ßa Situacional',
        slug: 'lideranca-situacional-q3-2024',
        description: 'Desenvolvimento de habilidades de lideran√ßa adaptativa',
        type: 'checklist' as const,
        status: 'pending' as const,
        organizationId: organization.id,
        createdById: user.id,
      },
      {
        title: 'Projeto Q4 - Planejamento Estrat√©gico Pessoal',
        slug: 'planejamento-estrategico-q4-2024',
        description: 'Workshops sobre defini√ß√£o de metas e planejamento de carreira',
        type: 'checklist' as const,
        status: 'pending' as const,
        organizationId: organization.id,
        createdById: user.id,
      },
    ];

    for (const projectData of quarterlyProjects) {
      const project = await prisma.project.create({
        data: projectData,
      });
      console.log(`‚úÖ Projeto trimestral criado: ${project.title}`);

      // Vincular projeto √† campanha trimestral
      await prisma.project.update({
        where: { id: project.id },
        data: {
          campaigns: {
            connect: { id: quarterlyCampaign.id }
          }
        }
      });
      console.log(`üîó Projeto vinculado √† campanha trimestral: ${project.title}`);
    }

    // Estat√≠sticas finais
    const totalCampaigns = await prisma.campaign.count();
    const totalProjects = await prisma.project.count();
    const totalDocuments = await prisma.campaignDocument.count();

    console.log('\nüìä Resumo do Seed Avan√ßado:');
    console.log(`‚úÖ Campanhas criadas: ${totalCampaigns}`);
    console.log(`‚úÖ Projetos criados: ${totalProjects}`);
    console.log(`‚úÖ Documentos criados: ${totalDocuments}`);
    console.log('üéâ Seed avan√ßado de campanhas conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro ao executar seed avan√ßado de campanhas:', error);
  } finally {
    await prisma.$disconnect();
  }
}

// Executar o seed se o arquivo for executado diretamente
if (require.main === module) {
  seedCampaignsWithProjects();
}
