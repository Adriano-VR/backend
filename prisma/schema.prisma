generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model profile {
  id                      String               @id @unique
  role                    Role                 @default(preset)
  name                    String
  profilePicture          String?              @map("profile_picture")
  completedOnboarding     Boolean              @default(false) @map("completed_onboarding")
  personalCorpEmail       String?              @map("personal_corp_email")
  displayName             String?              @map("display_name")
  slug                    String               @unique
  email                   String               @unique
  gender                  String?              @map("gender")
  birthDate               DateTime?            @map("birth_date")
  cpf                     String?              @unique
  whatsapp                String?
  bio                     String?              @map("bio")
  emailConfirmed          Boolean              @default(false) @map("email_confirmed")
  jobTitle                String?              @map("job_title")
  settings                Json?
  departmentId            String?              @map("department_id")
  createdAt               DateTime             @default(now()) @map("created_at")
  updatedAt               DateTime             @updatedAt @map("updated_at")
  deletedAt               DateTime?            @map("deleted_at")
  appointments            appointment[]
  campaignsCreated        campaign[]           @relation("CampaignCreatedBy")
  campaignDocuments       campaignDocument[]   @relation("CampaignDocumentUploadedBy")
  createdForms            form[]               @relation("FormCreatedBy")
  createdGroups           group[]              @relation("GroupsCreatedBy")
  histories               history[]
  notifications           notification[]
  organizationsCreated    organization[]       @relation("OrganizationsCreatedBy")
  organizationMemberships organizationMember[]
  department              department?          @relation(fields: [departmentId], references: [id])
  createdProjects         project[]            @relation("ProjectCreatedBy")
  submittedForms          submittedForm[]
  userCourseProgresses    userCourseProgress[]

  @@index([role, email, id])
  @@map("profile")
}

model organization {
  id                     String               @id @default(uuid())
  name                   String
  logo                   String?              @map("logo")
  fantasyName            String?              @map("fantasy_name")
  cnpj                   String?              @unique @map("cnpj")
  corporateEmail         String?              @map("corporate_email")
  userId                 String?              @unique @map("user_id")
  numberOfEmployees      String?              @map("number_of_employees")
  whatsapp               String?
  inviteCode             String               @unique @map("invite_code")
  type                   String?              @map("type")
  openingDate            DateTime?            @map("opening_date")
  situation              String?              @map("situation")
  situationDate          DateTime?            @map("situation_date")
  situationSpecial       String?              @map("situation_special")
  situationSpecialDate   DateTime?            @map("situation_special_date")
  legalNature            String?              @map("legal_nature")
  companySize            String?              @map("company_size")
  mainActivity           Json?                @map("main_activity")
  secondaryActivities    Json?                @map("secondary_activities")
  qsa                    Json?                @map("qsa")
  capitalStock           String?              @map("capital_stock")
  efr                    String?              @map("efr")
  status                 String?              @map("status")
  motiveSituation        String?              @map("motive_situation")
  lastUpdate             DateTime?            @map("last_update")
  billing                Json?                @map("billing")
  simples                Json?                @map("simples")
  simei                  Json?                @map("simei")
  extra                  Json?                @map("extra")
  addressId              String?              @map("address_id")
  createdById            String?              @map("created_by_id")
  slug                   String               @unique
  numberOfCollaborators  String?              @map("number_of_collaborators")
  hasCompletedOnboarding Boolean              @default(false) @map("has_completed_onboarding")
  headOfficeUuid         String?              @unique @map("head_office_uuid")
  isActive               Boolean              @default(true) @map("is_active")
  nr1Status              Nr1Status?           @map("nr1_status")
  registrationCode       String?              @unique @map("registration_code")
  settings               Json?
  createdAt              DateTime             @default(now()) @map("created_at")
  updatedAt              DateTime             @updatedAt @map("updated_at")
  deletedAt              DateTime?            @map("deleted_at")
  groupId                Int?                 @map("group_id")
  activity               activity?
  campaigns              campaign[]
  departments            department[]
  forms                  form[]
  address                address?             @relation(fields: [addressId], references: [id])
  createdBy              profile?             @relation("OrganizationsCreatedBy", fields: [createdById], references: [id])
  group                  group?               @relation(fields: [groupId], references: [id])
  members                organizationMember[]
  projects               project[]

  @@map("organization")
}

model activity {
  id             String        @id @default(uuid())
  cnae           String?
  name           String
  slug           String        @unique
  sector         Sector
  organizationId String?       @unique @map("organization_id")
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  organization   organization? @relation(fields: [organizationId], references: [id])
}

model department {
  id             String        @id @default(uuid())
  name           String
  slug           String        @unique
  createdAt      DateTime      @default(now()) @map("created_at")
  organizationId String?       @map("organization_id")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  deletedAt      DateTime?     @map("deleted_at")
  organization   organization? @relation(fields: [organizationId], references: [id])
  profiles       profile[]

  @@map("department")
}

model group {
  id             Int            @id @default(autoincrement())
  name           String?
  slug           String         @unique
  createdAt      DateTime       @default(now()) @map("created_at")
  createdById    String?        @map("created_by_id")
  organizationId String?        @map("organization_id")
  updatedAt      DateTime       @updatedAt @map("updated_at")
  deletedAt      DateTime?      @map("deleted_at")
  createdBy      profile?       @relation("GroupsCreatedBy", fields: [createdById], references: [id])
  organizations  organization[]

  @@map("group")
}

model form {
  id                       String          @id @default(uuid())
  slug                     String          @unique
  title                    String
  description              String?
  instructions             String?         @map("instructions")
  isTemplate               Boolean         @default(false) @map("is_template")
  templateId               String?         @map("template_id")
  createdAt                DateTime        @default(now()) @map("created_at")
  createdById              String?         @map("created_by_id")
  organizationId           String?         @map("organization_id")
  updatedAt                DateTime        @updatedAt @map("updated_at")
  deletedAt                DateTime?       @map("deleted_at")
  limitDate                DateTime?       @map("limit_date")
  qualityDiagnosis         String          @default("")

  createdBy                profile?        @relation("FormCreatedBy", fields: [createdById], references: [id])
  organization             organization?   @relation(fields: [organizationId], references: [id])
  template                 form?           @relation("FormTemplate", fields: [templateId], references: [id])
  formsUsingThisAsTemplate form[]          @relation("FormTemplate")
  questions                formQuestion[]
  submittedForms           submittedForm[]

  @@map("form")
}

model formQuestion {
  id         String   @id @default(uuid())
  formId     String
  questionId String
  order      Int
  required   Boolean
  hidden     Boolean  @default(false)
  form       form     @relation(fields: [formId], references: [id])
  question   question @relation(fields: [questionId], references: [id])
}

model questionGroup {
  id        String     @id @unique @default(uuid())
  name      String
  label     String
  slug      String     @unique
  meta      Json?
  order     Int
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  deletedAt DateTime?  @map("deleted_at")
  questions question[]

  @@map("question_group")
}

model question {
  id              String         @id @unique @default(uuid())
  code            String         @map("code")
  level           String         @map("level")
  dimension       String         @map("dimension")
  comment         String?        @map("comment")
  text            String
  type            QuestionType
  options         Json?
  questionGroupId String?        @map("question_group_id")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @default(now()) @map("updated_at")
  deletedAt       DateTime?      @map("deleted_at")
  answers         answer[]
  formQuestion    formQuestion[]
  questionGroup   questionGroup? @relation(fields: [questionGroupId], references: [id])

  @@map("question")
}

model submittedForm {
  id          String    @id @default(uuid())
  status      Status    @default(pending) @map("status")
  completedAt DateTime? @map("completed_at")
  formId      String?   @map("form_id")
  startedAt   DateTime  @default(now()) @map("started_at")
  profileId   String?   @map("user_id")
  campaignId  String?   @map("campaign_id")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  answers     answer[]
  campaign    campaign? @relation(fields: [campaignId], references: [id])
  form        form?     @relation(fields: [formId], references: [id])
  profile     profile?  @relation(fields: [profileId], references: [id])

  @@map("submitted_form")
}

model campaign {
  id             String             @id @default(uuid())
  name           String
  description    String?
  frequency      CampaignFrequency  @default(semestral)
  startDate      DateTime           @map("start_date")
  endDate        DateTime?          @map("end_date")
  status         CampaignStatus     @default(inactive)
  organizationId String?            @map("organization_id")
  createdById    String?            @map("created_by_id")
  createdAt      DateTime           @default(now()) @map("created_at")
  updatedAt      DateTime           @updatedAt @map("updated_at")
  deletedAt      DateTime?          @map("deleted_at")
  createdBy      profile?           @relation("CampaignCreatedBy", fields: [createdById], references: [id])
  organization   organization?      @relation(fields: [organizationId], references: [id])
  documents      campaignDocument[]
  submittedForms submittedForm[]
  projects       project[]          @relation("campaignToproject")

  @@map("campaign")
}

model campaignDocument {
  id           String    @id @default(uuid())
  name         String
  description  String?
  fileUrl      String    @map("file_url")
  fileType     String    @map("file_type")
  fileSize     Int       @map("file_size")
  campaignId   String    @map("campaign_id")
  uploadedById String?   @map("uploaded_by_id")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")
  campaign     campaign  @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  uploadedBy   profile?  @relation("CampaignDocumentUploadedBy", fields: [uploadedById], references: [id])

  @@map("campaign_document")
}

model answer {
  id              String         @id @default(uuid())
  value           String?        @map("value")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  deletedAt       DateTime?      @map("deleted_at")
  questionId      String?
  submittedFormId String?
  question        question?      @relation(fields: [questionId], references: [id])
  submittedForm   submittedForm? @relation(fields: [submittedFormId], references: [id])

  @@unique([submittedFormId, questionId])
  @@map("answer")
}

model notification {
  id        String    @id @default(uuid())
  title     String
  message   String?
  createdAt DateTime  @default(now()) @map("created_at")
  isRead    Boolean   @default(false) @map("is_read")
  updatedAt DateTime  @default(now()) @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  profileId String?   @map("user_id")
  profile   profile?  @relation(fields: [profileId], references: [id])

  @@map("notification")
}

model project {
  id             String        @id @default(uuid())
  title          String
  slug           String        @unique
  isTemplate     Boolean       @default(false) @map("is_template")
  type           ProjectType   @default(project) @map("type")
  description    String?
  problem        String?
  solution       String?
  impact         String?
  metrics        String?
  timeline       String?
  resources      String?
  risks          String?
  status         Status        @default(pending)
  createdAt      DateTime      @default(now()) @map("created_at")
  createdById    String?       @map("created_by_id")
  organizationId String?       @map("organization_id")
  updatedAt      DateTime      @updatedAt @map("updated_at")
  deletedAt      DateTime?     @map("deleted_at")
  actions        action[]
  tarefas        tarefa[]
  createdBy      profile?      @relation("ProjectCreatedBy", fields: [createdById], references: [id])
  organization   organization? @relation(fields: [organizationId], references: [id])
  campaigns      campaign[]    @relation("campaignToproject")

  @@map("project")
}

model action {
  id                   String    @id @default(uuid())
  title                String
  description          String?
  projectId            String?   @map("project_id")
  status               Status    @default(pending) @map("status")
  startDate            DateTime? @map("start_date")
  endDate              DateTime? @map("end_date")
  responsible          String?   @map("responsible")
  responsibleProfileId String?   @map("responsible_profile_id")
  resources            String?   @map("resources")
  createdAt            DateTime  @default(now()) @map("created_at")
  updatedAt            DateTime  @updatedAt @map("updated_at")
  deletedAt            DateTime? @map("deleted_at")
  project              project?  @relation(fields: [projectId], references: [id])

  @@map("action")
}

model tarefa {
  id                    String        @id @default(uuid())
  titulo                String
  descricao             String?
  responsavel           String?
  dataInicio            DateTime?     @map("data_inicio")
  dataPrevisaoConclusao DateTime?     @map("data_previsao_conclusao")
  dataConclusao         DateTime?     @map("data_conclusao")
  status                TarefaStatus  @default(pendente)
  projectId             String        @map("project_id")
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  deletedAt             DateTime?     @map("deleted_at")
  project               project       @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("tarefa")
}

model lead {
  id          String       @id @default(uuid())
  nome        String
  email       String
  whatsapp    String?
  payload     Json?
  createdAt   DateTime     @default(now()) @map("created_at")
  formType    LeadFormType @map("form_type")
  pageUrl     String       @map("page_url")
  updatedAt   DateTime     @updatedAt @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  utmCampaign String?      @map("utm_campaign")
  utmMedium   String?      @map("utm_medium")
  utmSource   String?      @map("utm_source")

  @@map("lead")
}

model trail {
  id          String    @id @default(uuid())
  slug        String    @unique
  title       String
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  courses     course[]

  @@map("trail")
}

model course {
  id                   String               @id @default(uuid())
  slug                 String               @unique
  title                String
  description          String?
  trailId              String?              @map("trail_id")
  createdAt            DateTime             @default(now()) @map("created_at")
  updatedAt            DateTime             @updatedAt @map("updated_at")
  deletedAt            DateTime?            @map("deleted_at")
  trail                trail?               @relation(fields: [trailId], references: [id])
  modules              module[]
  userCourseProgresses userCourseProgress[]

  @@map("course")
}

model module {
  id          String    @id @default(uuid())
  slug        String    @unique
  title       String
  description String?
  courseId    String    @map("course_id")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  lessons     lesson[]
  course      course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("module")
}

model lesson {
  id        String    @id @default(uuid())
  slug      String    @unique
  title     String
  content   String?
  moduleId  String    @map("module_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  module    module    @relation(fields: [moduleId], references: [id], onDelete: Cascade)

  @@map("lesson")
}

model userCourseProgress {
  id          String         @id @default(uuid())
  profileId   String         @map("user_id")
  courseId    String         @map("course_id")
  startedAt   DateTime       @default(now()) @map("started_at")
  completedAt DateTime?      @map("completed_at")
  progress    Float?
  status      ProgressStatus @default(in_progress)
  details     Json?
  course      course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  profile     profile        @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, courseId])
  @@map("user_course_progress")
}

model organizationMember {
  id             String           @id @default(uuid())
  profileId      String           @map("profile_id")
  organizationId String           @map("organization_id")
  role           Role
  status         PermissionStatus @default(pending)
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")
  deletedAt      DateTime?        @map("deleted_at")
  organization   organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  profile        profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, organizationId])
  @@map("organization_member")
}

model address {
  id           String         @id @default(uuid())
  street       String?        @map("street")
  number       String?        @map("number")
  complement   String?        @map("complement")
  district     String?        @map("district")
  city         String?        @map("city")
  state        String?        @map("state")
  zipCode      String?        @map("zip_code")
  organization organization[]

  @@map("address")
}

model history {
  id        String      @id @default(uuid())
  type      HistoryType @default(feeling)
  data      Json
  profileId String      @map("profile_id")
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  deletedAt DateTime?   @map("deleted_at")
  profile   profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("history")
}

model appointment {
  id          String            @id @default(uuid())
  title       String
  description String?
  startTime   DateTime          @map("start_time")
  endTime     DateTime          @map("end_time")
  status      AppointmentStatus @default(scheduled)
  location    String?
  notes       String?
  profileId   String            @map("profile_id")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  deletedAt   DateTime?         @map("deleted_at")
  profile     profile           @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("appointment")
}

enum Role {
  super_admin
  executive
  admin
  collaborator
  professional
  support
  preset
}

enum Sector {
  industry
  service
  commerce
  other
}

enum Status {
  pending
  in_progress
  completed
}

enum TarefaStatus {
  pendente
  iniciado
  concluido
  cancelado
}

enum Nr1Status {
  never_heard_of_it
  we_know_but_dont_do
  choosing_solution
  meeting_requirements
}

enum QuestionType {
  scale_frequency
  scale_intensity
  qualitative
  multiple_choice
  text
  number
}

enum LeadFormType {
  RISK_CALCULATOR
  DEMO_REQUEST
  HOME_FORM
}

enum ProjectType {
  project
  action_plan
  checklist
}

enum ProgressStatus {
  in_progress
  completed
  not_started
  abandoned
}

enum PermissionStatus {
  pending
  active
  suspended
  removed
}

enum HistoryType {
  feeling
  form
}

enum AppointmentStatus {
  scheduled
  confirmed
  completed
  cancelled
  rescheduled
}

enum CampaignFrequency {
  semestral
  anual
  trimestral
  mensal
}

enum CampaignStatus {
  active
  inactive
  paused
  completed
  cancelled
}
