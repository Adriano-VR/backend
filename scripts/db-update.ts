#!/usr/bin/env ts-node

import { execSync } from 'child_process';
import * as readline from 'readline';
import * as path from 'path';

console.log('üóÑÔ∏è Sistema de Atualiza√ß√£o do Banco de Dados - MenteSegura\n');

interface ScriptOption {
    id: string;
    name: string;
    description: string;
    command: string;
    dangerous?: boolean;
    requiresConfirmation?: boolean;
}

// Configura√ß√£o das op√ß√µes de scripts organizados por categoria
const scriptCategories = {
    seeds: {
        title: 'üå± SEEDS B√ÅSICOS',
        options: [
            {
                id: 'seed-basic',
                name: 'Seed B√°sico (Templates)',
                description: 'Executa seed dos templates de formul√°rios',
                command: 'pnpm seed:basic'
            },
            {
                id: 'seed-forms',
                name: 'Seed Formul√°rios',
                description: 'Executa seed espec√≠fico dos formul√°rios',
                command: 'pnpm seed:forms'
            },
            {
                id: 'seed-courses',
                name: 'Seed Cursos',
                description: 'Executa seed dos cursos',
                command: 'pnpm seed:courses'
            }
        ]
    },
    demos: {
        title: 'üë• SEEDS DE DEMONSTRA√á√ÉO',
        options: [
            {
                id: 'seed-demo',
                name: 'Seed Demo Padr√£o',
                description: 'Executa seed completo para demonstra√ß√£o',
                command: 'pnpm seed:demo'
            },
            {
                id: 'seed-detran',
                name: 'Seed Demo Detran',
                description: 'Executa seed espec√≠fico para demo do Detran',
                command: 'pnpm seed:detran'
            },
            {
                id: 'seed-submitted-forms',
                name: 'Seed Formul√°rios Submetidos',
                description: 'Executa seed de formul√°rios j√° submetidos',
                command: 'pnpm seed:submitedForms'
            }
        ]
    },
    organizations: {
        title: 'üè¢ ORGANIZA√á√ïES E FORMUL√ÅRIOS',
        options: [
            {
                id: 'seed-org-forms',
                name: 'Formul√°rios Organizacionais',
                description: 'Disponibiliza formul√°rios para organiza√ß√µes',
                command: 'pnpm seed:orgForms'
            }
        ]
    },
    database: {
        title: 'üîß MANUTEN√á√ÉO DO BANCO',
        options: [
            {
                id: 'prisma-push',
                name: 'Sincronizar Schema',
                description: 'Sincroniza o schema do Prisma com o banco',
                command: 'pnpm prisma:push'
            },
            {
                id: 'prisma-generate',
                name: 'Regenerar Client',
                description: 'Regenera o cliente Prisma',
                command: 'npx prisma generate'
            },
            {
                id: 'prisma-migrate',
                name: 'Executar Migra√ß√µes',
                description: 'Executa migra√ß√µes pendentes',
                command: 'npx prisma migrate dev'
            }
        ]
    },
    cleanup: {
        title: 'üßπ LIMPEZA E RESET',
        options: [
            {
                id: 'delete-test-users',
                name: 'Limpar Usu√°rios de Teste',
                description: 'Remove usu√°rios de teste do Supabase',
                command: 'pnpm seed:deleteTestUsers'
            },
            {
                id: 'clear-db',
                name: 'Limpar Banco Completo',
                description: 'Reset completo do banco de dados',
                command: 'pnpm clear:db',
                dangerous: true,
                requiresConfirmation: true
            },
            {
                id: 'reset-full',
                name: 'Reset Completo + Seed',
                description: 'Reset total com migra√ß√µes e seed b√°sico',
                command: 'pnpm reset:full',
                dangerous: true,
                requiresConfirmation: true
            }
        ]
    }
};

// Fun√ß√£o para executar comandos com feedback visual
function runCommand(command: string, description: string): boolean {
    console.log(`\nüîÑ ${description}...`);
    console.log(`üíª Executando: ${command}\n`);
    
    try {
        execSync(command, { 
            cwd: path.join(__dirname, '..'),
            stdio: 'inherit',
            encoding: 'utf-8'
        });
        
        console.log(`\n‚úÖ ${description} conclu√≠do com sucesso! üéâ\n`);
        return true;
    } catch (error: any) {
        console.error(`\n‚ùå Erro ao executar ${description.toLowerCase()}:`);
        console.error(`üêõ ${error.message || error}\n`);
        return false;
    }
}

// Fun√ß√£o para criar interface readline
function createReadlineInterface() {
    return readline.createInterface({
        input: process.stdin,
        output: process.stdout
    });
}

// Fun√ß√£o para perguntar confirma√ß√£o
function askConfirmation(rl: readline.Interface, message: string): Promise<boolean> {
    return new Promise((resolve) => {
        rl.question(`‚ö†Ô∏è ${message} (s/N): `, (answer: string) => {
            const confirmed = answer.toLowerCase() === 's' || answer.toLowerCase() === 'sim';
            resolve(confirmed);
        });
    });
}

// Fun√ß√£o para exibir menu principal
function displayMainMenu() {
    console.log('üìã MENU PRINCIPAL - Escolha uma categoria:\n');
    
    let optionNumber = 1;
    const categoryMap: { [key: number]: string } = {};
    
    Object.entries(scriptCategories).forEach(([categoryKey, category]) => {
        console.log(`${optionNumber}. ${category.title}`);
        categoryMap[optionNumber] = categoryKey;
        optionNumber++;
    });
    
    console.log(`\nüîÑ ${optionNumber}. Executar M√∫ltiplos Scripts`);
    categoryMap[optionNumber] = 'multiple';
    optionNumber++;
    
    console.log(`0. üëã Sair\n`);
    
    return categoryMap;
}

// Fun√ß√£o para exibir menu de categoria
function displayCategoryMenu(categoryKey: string) {
    const category = scriptCategories[categoryKey as keyof typeof scriptCategories];
    
    console.log(`\n${category.title}:\n`);
    
    category.options.forEach((option, index) => {
        const dangerIcon = (option as any).dangerous ? '‚ö†Ô∏è ' : '';
        console.log(`${index + 1}. ${dangerIcon}${option.name}`);
        console.log(`   ${option.description}`);
        console.log('');
    });
    
    console.log('0. ‚¨ÖÔ∏è Voltar ao menu principal\n');
}

// Fun√ß√£o para executar script com confirma√ß√£o se necess√°rio
async function executeScript(option: ScriptOption, rl: readline.Interface): Promise<void> {
    if ((option as any).requiresConfirmation) {
        const confirmed = await askConfirmation(
            rl,
            `Esta a√ß√£o √© IRREVERS√çVEL e pode apagar dados! Continuar?`
        );
        
        if (!confirmed) {
            console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio.\n');
            return;
        }
    }
    
    const success = runCommand(option.command, option.name);
    
    if (success) {
        console.log(`üéä ${option.name} executado com sucesso!\n`);
    } else {
        console.log(`üí• Falha na execu√ß√£o de ${option.name}.\n`);
    }
}

// Fun√ß√£o para menu de m√∫ltiplos scripts
async function handleMultipleScripts(rl: readline.Interface): Promise<void> {
    console.log('\nüîÑ EXECU√á√ÉO M√öLTIPLA - Escolha uma sequ√™ncia:\n');
    
    const sequences = [
        {
            name: 'Setup Inicial Completo',
            description: 'Prisma push + Seed b√°sico + Formul√°rios org.',
            commands: ['pnpm prisma:push', 'pnpm seed:basic', 'pnpm seed:orgForms']
        },
        {
            name: 'Reset e Setup Demo',
            description: 'Reset + Seed b√°sico + Demo padr√£o',
            commands: ['pnpm clear:db', 'pnpm seed:basic', 'pnpm seed:demo'],
            dangerous: true
        },
        {
            name: 'Atualiza√ß√£o de Schema',
            description: 'Generate + Push + Migrate',
            commands: ['npx prisma generate', 'pnpm prisma:push', 'npx prisma migrate dev']
        }
    ];
    
    sequences.forEach((seq, index) => {
        const dangerIcon = (seq as any).dangerous ? '‚ö†Ô∏è ' : '';
        console.log(`${index + 1}. ${dangerIcon}${seq.name}`);
        console.log(`   ${seq.description}`);
        console.log('');
    });
    
    console.log('0. ‚¨ÖÔ∏è Voltar ao menu principal\n');
    
    const answer = await new Promise<string>((resolve) => {
        rl.question('Escolha uma sequ√™ncia (0-3): ', resolve);
    });
    
    const choice = parseInt(answer.trim());
    
    if (choice === 0) return;
    
    const selectedSequence = sequences[choice - 1];
    if (!selectedSequence) {
        console.log('‚ùå Op√ß√£o inv√°lida!\n');
        return;
    }
    
    if ((selectedSequence as any).dangerous) {
        const confirmed = await askConfirmation(
            rl,
            'Esta sequ√™ncia cont√©m opera√ß√µes perigosas! Continuar?'
        );
        
        if (!confirmed) {
            console.log('‚ùå Opera√ß√£o cancelada pelo usu√°rio.\n');
            return;
        }
    }
    
    console.log(`\nüöÄ Executando sequ√™ncia: ${selectedSequence.name}\n`);
    
    for (let i = 0; i < selectedSequence.commands.length; i++) {
        const command = selectedSequence.commands[i];
        console.log(`üìç Passo ${i + 1}/${selectedSequence.commands.length}:`);
        
        const success = runCommand(command, `Executando ${command}`);
        
        if (!success) {
            console.log(`‚ùå Falha no passo ${i + 1}. Abortando sequ√™ncia.\n`);
            return;
        }
    }
    
    console.log(`üéâ Sequ√™ncia "${selectedSequence.name}" conclu√≠da com sucesso!\n`);
}

// Fun√ß√£o principal
async function main(): Promise<void> {
    const rl = createReadlineInterface();
    
    try {
        while (true) {
            const categoryMap = displayMainMenu();
            
            const mainAnswer = await new Promise<string>((resolve) => {
                rl.question('Escolha uma op√ß√£o: ', resolve);
            });
            
            const mainChoice = parseInt(mainAnswer.trim());
            
            if (mainChoice === 0) {
                console.log('\nüëã Encerrando sistema de atualiza√ß√£o do banco...');
                break;
            }
            
            const selectedCategory = categoryMap[mainChoice];
            
            if (!selectedCategory) {
                console.log('‚ùå Op√ß√£o inv√°lida!\n');
                continue;
            }
            
            if (selectedCategory === 'multiple') {
                await handleMultipleScripts(rl);
                continue;
            }
            
            // Menu da categoria
            while (true) {
                displayCategoryMenu(selectedCategory);
                
                const categoryAnswer = await new Promise<string>((resolve) => {
                    rl.question('Escolha uma op√ß√£o: ', resolve);
                });
                
                const categoryChoice = parseInt(categoryAnswer.trim());
                
                if (categoryChoice === 0) {
                    break; // Volta ao menu principal
                }
                
                const category = scriptCategories[selectedCategory as keyof typeof scriptCategories];
                const selectedOption = category.options[categoryChoice - 1];
                
                if (!selectedOption) {
                    console.log('‚ùå Op√ß√£o inv√°lida!\n');
                    continue;
                }
                
                await executeScript(selectedOption, rl);
            }
        }
    } finally {
        rl.close();
    }
}

// Executar se chamado diretamente
if (require.main === module) {
    main().catch((error) => {
        console.error('‚ùå Erro cr√≠tico no sistema:', error);
        process.exit(1);
    });
}

export default main;
